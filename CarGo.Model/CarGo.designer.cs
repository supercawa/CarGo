#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarGo.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CarGo")]
	public partial class CarGoDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAdress(Adress instance);
    partial void UpdateAdress(Adress instance);
    partial void DeleteAdress(Adress instance);
    partial void InsertCarBrand(CarBrand instance);
    partial void UpdateCarBrand(CarBrand instance);
    partial void DeleteCarBrand(CarBrand instance);
    partial void InsertCarLoadingType(CarLoadingType instance);
    partial void UpdateCarLoadingType(CarLoadingType instance);
    partial void DeleteCarLoadingType(CarLoadingType instance);
    partial void InsertCarModel(CarModel instance);
    partial void UpdateCarModel(CarModel instance);
    partial void DeleteCarModel(CarModel instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCarType(CarType instance);
    partial void UpdateCarType(CarType instance);
    partial void DeleteCarType(CarType instance);
    partial void InsertFreightType(FreightType instance);
    partial void UpdateFreightType(FreightType instance);
    partial void DeleteFreightType(FreightType instance);
    partial void InsertGeoCity(GeoCity instance);
    partial void UpdateGeoCity(GeoCity instance);
    partial void DeleteGeoCity(GeoCity instance);
    partial void InsertGeoRegion(GeoRegion instance);
    partial void UpdateGeoRegion(GeoRegion instance);
    partial void DeleteGeoRegion(GeoRegion instance);
    partial void InsertGeoStreet(GeoStreet instance);
    partial void UpdateGeoStreet(GeoStreet instance);
    partial void DeleteGeoStreet(GeoStreet instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertShiping(Shiping instance);
    partial void UpdateShiping(Shiping instance);
    partial void DeleteShiping(Shiping instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public CarGoDbDataContext() : 
				base(global::CarGo.Model.Properties.Settings.Default.CarGoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CarGoDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarGoDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarGoDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarGoDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Adress> Adress
		{
			get
			{
				return this.GetTable<Adress>();
			}
		}
		
		public System.Data.Linq.Table<CarBrand> CarBrand
		{
			get
			{
				return this.GetTable<CarBrand>();
			}
		}
		
		public System.Data.Linq.Table<CarLoadingType> CarLoadingType
		{
			get
			{
				return this.GetTable<CarLoadingType>();
			}
		}
		
		public System.Data.Linq.Table<CarModel> CarModel
		{
			get
			{
				return this.GetTable<CarModel>();
			}
		}
		
		public System.Data.Linq.Table<Car> Car
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CarType> CarType
		{
			get
			{
				return this.GetTable<CarType>();
			}
		}
		
		public System.Data.Linq.Table<FreightType> FreightType
		{
			get
			{
				return this.GetTable<FreightType>();
			}
		}
		
		public System.Data.Linq.Table<GeoCity> GeoCity
		{
			get
			{
				return this.GetTable<GeoCity>();
			}
		}
		
		public System.Data.Linq.Table<GeoRegion> GeoRegion
		{
			get
			{
				return this.GetTable<GeoRegion>();
			}
		}
		
		public System.Data.Linq.Table<GeoStreet> GeoStreet
		{
			get
			{
				return this.GetTable<GeoStreet>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Shiping> Shiping
		{
			get
			{
				return this.GetTable<Shiping>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRole
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adresses")]
	public partial class Adress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _StreetId;
		
		private string _Description;
		
		private EntitySet<Shiping> _Shipings;
		
		private EntitySet<Shiping> _Shiping;
		
		private EntityRef<GeoCity> _GeoCitiy;
		
		private EntityRef<GeoStreet> _GeoStreet;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnStreetIdChanging(System.Nullable<int> value);
    partial void OnStreetIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Adress()
		{
			this._Shipings = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shipings), new Action<Shiping>(this.detach_Shipings));
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			this._GeoCitiy = default(EntityRef<GeoCity>);
			this._GeoStreet = default(EntityRef<GeoStreet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._GeoCitiy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetId", DbType="Int")]
		public System.Nullable<int> StreetId
		{
			get
			{
				return this._StreetId;
			}
			set
			{
				if ((this._StreetId != value))
				{
					if (this._GeoStreet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIdChanging(value);
					this.SendPropertyChanging();
					this._StreetId = value;
					this.SendPropertyChanged("StreetId");
					this.OnStreetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Shiping", Storage="_Shipings", ThisKey="Id", OtherKey="LoadingAdressId")]
		public EntitySet<Shiping> Shipings
		{
			get
			{
				return this._Shipings;
			}
			set
			{
				this._Shipings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Shiping1", Storage="_Shiping", ThisKey="Id", OtherKey="UnloadingAdressId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoCitiy_Adress", Storage="_GeoCitiy", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public GeoCity GeoCity
		{
			get
			{
				return this._GeoCitiy.Entity;
			}
			set
			{
				GeoCity previousValue = this._GeoCitiy.Entity;
				if (((previousValue != value) 
							|| (this._GeoCitiy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoCitiy.Entity = null;
						previousValue.Adress.Remove(this);
					}
					this._GeoCitiy.Entity = value;
					if ((value != null))
					{
						value.Adress.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeoCity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoStreet_Adress", Storage="_GeoStreet", ThisKey="StreetId", OtherKey="Id", IsForeignKey=true)]
		public GeoStreet GeoStreet
		{
			get
			{
				return this._GeoStreet.Entity;
			}
			set
			{
				GeoStreet previousValue = this._GeoStreet.Entity;
				if (((previousValue != value) 
							|| (this._GeoStreet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoStreet.Entity = null;
						previousValue.Adress.Remove(this);
					}
					this._GeoStreet.Entity = value;
					if ((value != null))
					{
						value.Adress.Add(this);
						this._StreetId = value.Id;
					}
					else
					{
						this._StreetId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeoStreet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipings(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Adresses = this;
		}
		
		private void detach_Shipings(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Adresses = null;
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Adress = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Adress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrands")]
	public partial class CarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CarModel> _CarModel;
		
		private EntitySet<Car> _Car;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CarBrand()
		{
			this._CarModel = new EntitySet<CarModel>(new Action<CarModel>(this.attach_CarModel), new Action<CarModel>(this.detach_CarModel));
			this._Car = new EntitySet<Car>(new Action<Car>(this.attach_Car), new Action<Car>(this.detach_Car));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_CarModel", Storage="_CarModel", ThisKey="Id", OtherKey="CarBrandId")]
		public EntitySet<CarModel> CarModel
		{
			get
			{
				return this._CarModel;
			}
			set
			{
				this._CarModel.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_Car", Storage="_Car", ThisKey="Id", OtherKey="CarBrandId")]
		public EntitySet<Car> Car
		{
			get
			{
				return this._Car;
			}
			set
			{
				this._Car.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarModel(CarModel entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = this;
		}
		
		private void detach_CarModel(CarModel entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = null;
		}
		
		private void attach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = this;
		}
		
		private void detach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarLoadingTypes")]
	public partial class CarLoadingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Car> _Car;
		
		private EntitySet<Shiping> _Shiping;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CarLoadingType()
		{
			this._Car = new EntitySet<Car>(new Action<Car>(this.attach_Car), new Action<Car>(this.detach_Car));
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarLoadingType_Car", Storage="_Car", ThisKey="Id", OtherKey="CarLoadingTypeId")]
		public EntitySet<Car> Car
		{
			get
			{
				return this._Car;
			}
			set
			{
				this._Car.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarLoadingType_Shiping", Storage="_Shiping", ThisKey="Id", OtherKey="CarLoadingTypeId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarLoadingType = this;
		}
		
		private void detach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarLoadingType = null;
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.CarLoadingType = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.CarLoadingType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarModels")]
	public partial class CarModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CarBrandId;
		
		private EntitySet<Car> _Car;
		
		private EntityRef<CarBrand> _CarBrand;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCarBrandIdChanging(int value);
    partial void OnCarBrandIdChanged();
    #endregion
		
		public CarModel()
		{
			this._Car = new EntitySet<Car>(new Action<Car>(this.attach_Car), new Action<Car>(this.detach_Car));
			this._CarBrand = default(EntityRef<CarBrand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBrandId", DbType="Int NOT NULL")]
		public int CarBrandId
		{
			get
			{
				return this._CarBrandId;
			}
			set
			{
				if ((this._CarBrandId != value))
				{
					if (this._CarBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarBrandIdChanging(value);
					this.SendPropertyChanging();
					this._CarBrandId = value;
					this.SendPropertyChanged("CarBrandId");
					this.OnCarBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Car", Storage="_Car", ThisKey="Id", OtherKey="CarModelId")]
		public EntitySet<Car> Car
		{
			get
			{
				return this._Car;
			}
			set
			{
				this._Car.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_CarModel", Storage="_CarBrand", ThisKey="CarBrandId", OtherKey="Id", IsForeignKey=true)]
		public CarBrand CarBrand
		{
			get
			{
				return this._CarBrand.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarBrand.Entity;
				if (((previousValue != value) 
							|| (this._CarBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrand.Entity = null;
						previousValue.CarModel.Remove(this);
					}
					this._CarBrand.Entity = value;
					if ((value != null))
					{
						value.CarModel.Add(this);
						this._CarBrandId = value.Id;
					}
					else
					{
						this._CarBrandId = default(int);
					}
					this.SendPropertyChanged("CarBrand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = this;
		}
		
		private void detach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CarBrandId;
		
		private int _CarModelId;
		
		private int _CarTypeId;
		
		private int _CarLoadingTypeId;
		
		private int _Tonnage;
		
		private int _Capacity;
		
		private int _UserId;
		
		private EntityRef<CarBrand> _CarBrand;
		
		private EntityRef<CarLoadingType> _CarLoadingType;
		
		private EntityRef<CarModel> _CarModel;
		
		private EntityRef<CarType> _CarType;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCarBrandIdChanging(int value);
    partial void OnCarBrandIdChanged();
    partial void OnCarModelIdChanging(int value);
    partial void OnCarModelIdChanged();
    partial void OnCarTypeIdChanging(int value);
    partial void OnCarTypeIdChanged();
    partial void OnCarLoadingTypeIdChanging(int value);
    partial void OnCarLoadingTypeIdChanged();
    partial void OnTonnageChanging(int value);
    partial void OnTonnageChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public Car()
		{
			this._CarBrand = default(EntityRef<CarBrand>);
			this._CarLoadingType = default(EntityRef<CarLoadingType>);
			this._CarModel = default(EntityRef<CarModel>);
			this._CarType = default(EntityRef<CarType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBrandId", DbType="Int NOT NULL")]
		public int CarBrandId
		{
			get
			{
				return this._CarBrandId;
			}
			set
			{
				if ((this._CarBrandId != value))
				{
					if (this._CarBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarBrandIdChanging(value);
					this.SendPropertyChanging();
					this._CarBrandId = value;
					this.SendPropertyChanged("CarBrandId");
					this.OnCarBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarModelId", DbType="Int NOT NULL")]
		public int CarModelId
		{
			get
			{
				return this._CarModelId;
			}
			set
			{
				if ((this._CarModelId != value))
				{
					if (this._CarModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarModelIdChanging(value);
					this.SendPropertyChanging();
					this._CarModelId = value;
					this.SendPropertyChanged("CarModelId");
					this.OnCarModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarTypeId", DbType="Int NOT NULL")]
		public int CarTypeId
		{
			get
			{
				return this._CarTypeId;
			}
			set
			{
				if ((this._CarTypeId != value))
				{
					if (this._CarType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CarTypeId = value;
					this.SendPropertyChanged("CarTypeId");
					this.OnCarTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarLoadingTypeId", DbType="Int NOT NULL")]
		public int CarLoadingTypeId
		{
			get
			{
				return this._CarLoadingTypeId;
			}
			set
			{
				if ((this._CarLoadingTypeId != value))
				{
					if (this._CarLoadingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarLoadingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CarLoadingTypeId = value;
					this.SendPropertyChanged("CarLoadingTypeId");
					this.OnCarLoadingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tonnage", DbType="Int NOT NULL")]
		public int Tonnage
		{
			get
			{
				return this._Tonnage;
			}
			set
			{
				if ((this._Tonnage != value))
				{
					this.OnTonnageChanging(value);
					this.SendPropertyChanging();
					this._Tonnage = value;
					this.SendPropertyChanged("Tonnage");
					this.OnTonnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_Car", Storage="_CarBrand", ThisKey="CarBrandId", OtherKey="Id", IsForeignKey=true)]
		public CarBrand CarBrand
		{
			get
			{
				return this._CarBrand.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarBrand.Entity;
				if (((previousValue != value) 
							|| (this._CarBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrand.Entity = null;
						previousValue.Car.Remove(this);
					}
					this._CarBrand.Entity = value;
					if ((value != null))
					{
						value.Car.Add(this);
						this._CarBrandId = value.Id;
					}
					else
					{
						this._CarBrandId = default(int);
					}
					this.SendPropertyChanged("CarBrand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarLoadingType_Car", Storage="_CarLoadingType", ThisKey="CarLoadingTypeId", OtherKey="Id", IsForeignKey=true)]
		public CarLoadingType CarLoadingType
		{
			get
			{
				return this._CarLoadingType.Entity;
			}
			set
			{
				CarLoadingType previousValue = this._CarLoadingType.Entity;
				if (((previousValue != value) 
							|| (this._CarLoadingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarLoadingType.Entity = null;
						previousValue.Car.Remove(this);
					}
					this._CarLoadingType.Entity = value;
					if ((value != null))
					{
						value.Car.Add(this);
						this._CarLoadingTypeId = value.Id;
					}
					else
					{
						this._CarLoadingTypeId = default(int);
					}
					this.SendPropertyChanged("CarLoadingType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Car", Storage="_CarModel", ThisKey="CarModelId", OtherKey="Id", IsForeignKey=true)]
		public CarModel CarModel
		{
			get
			{
				return this._CarModel.Entity;
			}
			set
			{
				CarModel previousValue = this._CarModel.Entity;
				if (((previousValue != value) 
							|| (this._CarModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModel.Entity = null;
						previousValue.Car.Remove(this);
					}
					this._CarModel.Entity = value;
					if ((value != null))
					{
						value.Car.Add(this);
						this._CarModelId = value.Id;
					}
					else
					{
						this._CarModelId = default(int);
					}
					this.SendPropertyChanged("CarModel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarType_Car", Storage="_CarType", ThisKey="CarTypeId", OtherKey="Id", IsForeignKey=true)]
		public CarType CarType
		{
			get
			{
				return this._CarType.Entity;
			}
			set
			{
				CarType previousValue = this._CarType.Entity;
				if (((previousValue != value) 
							|| (this._CarType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarType.Entity = null;
						previousValue.Car.Remove(this);
					}
					this._CarType.Entity = value;
					if ((value != null))
					{
						value.Car.Add(this);
						this._CarTypeId = value.Id;
					}
					else
					{
						this._CarTypeId = default(int);
					}
					this.SendPropertyChanged("CarType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Car.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Car.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarTypes")]
	public partial class CarType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Car> _Car;
		
		private EntitySet<Shiping> _Shiping;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CarType()
		{
			this._Car = new EntitySet<Car>(new Action<Car>(this.attach_Car), new Action<Car>(this.detach_Car));
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarType_Car", Storage="_Car", ThisKey="Id", OtherKey="CarTypeId")]
		public EntitySet<Car> Car
		{
			get
			{
				return this._Car;
			}
			set
			{
				this._Car.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarType_Shiping", Storage="_Shiping", ThisKey="Id", OtherKey="CarTypeId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarType = this;
		}
		
		private void detach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarType = null;
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.CarType = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.CarType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FreightTypes")]
	public partial class FreightType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Shiping> _Shiping;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FreightType()
		{
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FreightType_Shiping", Storage="_Shiping", ThisKey="Id", OtherKey="FreightTypeId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.FreightType = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.FreightType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoCities")]
	public partial class GeoCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RegionId;
		
		private string _City;
		
		private string _CityType;
		
		private EntitySet<Adress> _Adress;
		
		private EntitySet<GeoStreet> _GeoStreet;
		
		private EntityRef<GeoRegion> _GeoRegion;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCityTypeChanging(string value);
    partial void OnCityTypeChanged();
    #endregion
		
		public GeoCity()
		{
			this._Adress = new EntitySet<Adress>(new Action<Adress>(this.attach_Adress), new Action<Adress>(this.detach_Adress));
			this._GeoStreet = new EntitySet<GeoStreet>(new Action<GeoStreet>(this.attach_GeoStreet), new Action<GeoStreet>(this.detach_GeoStreet));
			this._GeoRegion = default(EntityRef<GeoRegion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", DbType="Int NOT NULL")]
		public int RegionId
		{
			get
			{
				return this._RegionId;
			}
			set
			{
				if ((this._RegionId != value))
				{
					if (this._GeoRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIdChanging(value);
					this.SendPropertyChanging();
					this._RegionId = value;
					this.SendPropertyChanged("RegionId");
					this.OnRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CityType
		{
			get
			{
				return this._CityType;
			}
			set
			{
				if ((this._CityType != value))
				{
					this.OnCityTypeChanging(value);
					this.SendPropertyChanging();
					this._CityType = value;
					this.SendPropertyChanged("CityType");
					this.OnCityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoCitiy_Adress", Storage="_Adress", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<Adress> Adress
		{
			get
			{
				return this._Adress;
			}
			set
			{
				this._Adress.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoCitiy_GeoStreet", Storage="_GeoStreet", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<GeoStreet> GeoStreet
		{
			get
			{
				return this._GeoStreet;
			}
			set
			{
				this._GeoStreet.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoRegion_GeoCitiy", Storage="_GeoRegion", ThisKey="RegionId", OtherKey="Id", IsForeignKey=true)]
		public GeoRegion GeoRegion
		{
			get
			{
				return this._GeoRegion.Entity;
			}
			set
			{
				GeoRegion previousValue = this._GeoRegion.Entity;
				if (((previousValue != value) 
							|| (this._GeoRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoRegion.Entity = null;
						previousValue.GeoCity.Remove(this);
					}
					this._GeoRegion.Entity = value;
					if ((value != null))
					{
						value.GeoCity.Add(this);
						this._RegionId = value.Id;
					}
					else
					{
						this._RegionId = default(int);
					}
					this.SendPropertyChanged("GeoRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Adress(Adress entity)
		{
			this.SendPropertyChanging();
			entity.GeoCity = this;
		}
		
		private void detach_Adress(Adress entity)
		{
			this.SendPropertyChanging();
			entity.GeoCity = null;
		}
		
		private void attach_GeoStreet(GeoStreet entity)
		{
			this.SendPropertyChanging();
			entity.GeoCity = this;
		}
		
		private void detach_GeoStreet(GeoStreet entity)
		{
			this.SendPropertyChanging();
			entity.GeoCity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoRegions")]
	public partial class GeoRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Region;
		
		private EntitySet<GeoCity> _GeoCitiy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    #endregion
		
		public GeoRegion()
		{
			this._GeoCitiy = new EntitySet<GeoCity>(new Action<GeoCity>(this.attach_GeoCitiy), new Action<GeoCity>(this.detach_GeoCitiy));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoRegion_GeoCitiy", Storage="_GeoCitiy", ThisKey="Id", OtherKey="RegionId")]
		public EntitySet<GeoCity> GeoCity
		{
			get
			{
				return this._GeoCitiy;
			}
			set
			{
				this._GeoCitiy.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeoCitiy(GeoCity entity)
		{
			this.SendPropertyChanging();
			entity.GeoRegion = this;
		}
		
		private void detach_GeoCitiy(GeoCity entity)
		{
			this.SendPropertyChanging();
			entity.GeoRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoStreets")]
	public partial class GeoStreet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CityId;
		
		private string _Street;
		
		private string _StreetType;
		
		private System.Nullable<int> _PostIndex;
		
		private EntitySet<Adress> _Adress;
		
		private EntityRef<GeoCity> _GeoCitiy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreetTypeChanging(string value);
    partial void OnStreetTypeChanged();
    partial void OnPostIndexChanging(System.Nullable<int> value);
    partial void OnPostIndexChanged();
    #endregion
		
		public GeoStreet()
		{
			this._Adress = new EntitySet<Adress>(new Action<Adress>(this.attach_Adress), new Action<Adress>(this.detach_Adress));
			this._GeoCitiy = default(EntityRef<GeoCity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._GeoCitiy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StreetType
		{
			get
			{
				return this._StreetType;
			}
			set
			{
				if ((this._StreetType != value))
				{
					this.OnStreetTypeChanging(value);
					this.SendPropertyChanging();
					this._StreetType = value;
					this.SendPropertyChanged("StreetType");
					this.OnStreetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostIndex", DbType="Int")]
		public System.Nullable<int> PostIndex
		{
			get
			{
				return this._PostIndex;
			}
			set
			{
				if ((this._PostIndex != value))
				{
					this.OnPostIndexChanging(value);
					this.SendPropertyChanging();
					this._PostIndex = value;
					this.SendPropertyChanged("PostIndex");
					this.OnPostIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoStreet_Adress", Storage="_Adress", ThisKey="Id", OtherKey="StreetId")]
		public EntitySet<Adress> Adress
		{
			get
			{
				return this._Adress;
			}
			set
			{
				this._Adress.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoCitiy_GeoStreet", Storage="_GeoCitiy", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public GeoCity GeoCity
		{
			get
			{
				return this._GeoCitiy.Entity;
			}
			set
			{
				GeoCity previousValue = this._GeoCitiy.Entity;
				if (((previousValue != value) 
							|| (this._GeoCitiy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoCitiy.Entity = null;
						previousValue.GeoStreet.Remove(this);
					}
					this._GeoCitiy.Entity = value;
					if ((value != null))
					{
						value.GeoStreet.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("GeoCity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Adress(Adress entity)
		{
			this.SendPropertyChanging();
			entity.GeoStreet = this;
		}
		
		private void detach_Adress(Adress entity)
		{
			this.SendPropertyChanging();
			entity.GeoStreet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRole;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRole", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shipings")]
	public partial class Shiping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FreightTypeId;
		
		private System.DateTime _LoadingDate;
		
		private System.Nullable<System.DateTime> _UnloadingDate;
		
		private int _LoadingAdressId;
		
		private System.Nullable<int> _Tonnage;
		
		private System.Nullable<int> _Capacity;
		
		private int _UserId;
		
		private int _UnloadingAdressId;
		
		private string _Description;
		
		private bool _NeedLoaders;
		
		private System.Nullable<int> _CarLoadingTypeId;
		
		private System.Nullable<int> _CarTypeId;
		
		private EntityRef<CarLoadingType> _CarLoadingType;
		
		private EntityRef<CarType> _CarType;
		
		private EntityRef<FreightType> _FreightType;
		
		private EntityRef<Adress> _Adresses;
		
		private EntityRef<Adress> _Adress;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFreightTypeIdChanging(int value);
    partial void OnFreightTypeIdChanged();
    partial void OnLoadingDateChanging(System.DateTime value);
    partial void OnLoadingDateChanged();
    partial void OnUnloadingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUnloadingDateChanged();
    partial void OnLoadingAdressIdChanging(int value);
    partial void OnLoadingAdressIdChanged();
    partial void OnTonnageChanging(System.Nullable<int> value);
    partial void OnTonnageChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUnloadingAdressIdChanging(int value);
    partial void OnUnloadingAdressIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNeedLoadersChanging(bool value);
    partial void OnNeedLoadersChanged();
    partial void OnCarLoadingTypeIdChanging(System.Nullable<int> value);
    partial void OnCarLoadingTypeIdChanged();
    partial void OnCarTypeIdChanging(System.Nullable<int> value);
    partial void OnCarTypeIdChanged();
    #endregion
		
		public Shiping()
		{
			this._CarLoadingType = default(EntityRef<CarLoadingType>);
			this._CarType = default(EntityRef<CarType>);
			this._FreightType = default(EntityRef<FreightType>);
			this._Adresses = default(EntityRef<Adress>);
			this._Adress = default(EntityRef<Adress>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreightTypeId", DbType="Int NOT NULL")]
		public int FreightTypeId
		{
			get
			{
				return this._FreightTypeId;
			}
			set
			{
				if ((this._FreightTypeId != value))
				{
					if (this._FreightType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreightTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FreightTypeId = value;
					this.SendPropertyChanged("FreightTypeId");
					this.OnFreightTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadingDate", DbType="DateTime NOT NULL")]
		public System.DateTime LoadingDate
		{
			get
			{
				return this._LoadingDate;
			}
			set
			{
				if ((this._LoadingDate != value))
				{
					this.OnLoadingDateChanging(value);
					this.SendPropertyChanging();
					this._LoadingDate = value;
					this.SendPropertyChanged("LoadingDate");
					this.OnLoadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnloadingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UnloadingDate
		{
			get
			{
				return this._UnloadingDate;
			}
			set
			{
				if ((this._UnloadingDate != value))
				{
					this.OnUnloadingDateChanging(value);
					this.SendPropertyChanging();
					this._UnloadingDate = value;
					this.SendPropertyChanged("UnloadingDate");
					this.OnUnloadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadingAdressId", DbType="Int NOT NULL")]
		public int LoadingAdressId
		{
			get
			{
				return this._LoadingAdressId;
			}
			set
			{
				if ((this._LoadingAdressId != value))
				{
					if (this._Adresses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadingAdressIdChanging(value);
					this.SendPropertyChanging();
					this._LoadingAdressId = value;
					this.SendPropertyChanged("LoadingAdressId");
					this.OnLoadingAdressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tonnage", DbType="Int")]
		public System.Nullable<int> Tonnage
		{
			get
			{
				return this._Tonnage;
			}
			set
			{
				if ((this._Tonnage != value))
				{
					this.OnTonnageChanging(value);
					this.SendPropertyChanging();
					this._Tonnage = value;
					this.SendPropertyChanged("Tonnage");
					this.OnTonnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnloadingAdressId", DbType="Int NOT NULL")]
		public int UnloadingAdressId
		{
			get
			{
				return this._UnloadingAdressId;
			}
			set
			{
				if ((this._UnloadingAdressId != value))
				{
					if (this._Adress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnloadingAdressIdChanging(value);
					this.SendPropertyChanging();
					this._UnloadingAdressId = value;
					this.SendPropertyChanged("UnloadingAdressId");
					this.OnUnloadingAdressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeedLoaders", DbType="Bit NOT NULL")]
		public bool NeedLoaders
		{
			get
			{
				return this._NeedLoaders;
			}
			set
			{
				if ((this._NeedLoaders != value))
				{
					this.OnNeedLoadersChanging(value);
					this.SendPropertyChanging();
					this._NeedLoaders = value;
					this.SendPropertyChanged("NeedLoaders");
					this.OnNeedLoadersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarLoadingTypeId", DbType="Int")]
		public System.Nullable<int> CarLoadingTypeId
		{
			get
			{
				return this._CarLoadingTypeId;
			}
			set
			{
				if ((this._CarLoadingTypeId != value))
				{
					if (this._CarLoadingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarLoadingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CarLoadingTypeId = value;
					this.SendPropertyChanged("CarLoadingTypeId");
					this.OnCarLoadingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarTypeId", DbType="Int")]
		public System.Nullable<int> CarTypeId
		{
			get
			{
				return this._CarTypeId;
			}
			set
			{
				if ((this._CarTypeId != value))
				{
					if (this._CarType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CarTypeId = value;
					this.SendPropertyChanged("CarTypeId");
					this.OnCarTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarLoadingType_Shiping", Storage="_CarLoadingType", ThisKey="CarLoadingTypeId", OtherKey="Id", IsForeignKey=true)]
		public CarLoadingType CarLoadingType
		{
			get
			{
				return this._CarLoadingType.Entity;
			}
			set
			{
				CarLoadingType previousValue = this._CarLoadingType.Entity;
				if (((previousValue != value) 
							|| (this._CarLoadingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarLoadingType.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._CarLoadingType.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._CarLoadingTypeId = value.Id;
					}
					else
					{
						this._CarLoadingTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarLoadingType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarType_Shiping", Storage="_CarType", ThisKey="CarTypeId", OtherKey="Id", IsForeignKey=true)]
		public CarType CarType
		{
			get
			{
				return this._CarType.Entity;
			}
			set
			{
				CarType previousValue = this._CarType.Entity;
				if (((previousValue != value) 
							|| (this._CarType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarType.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._CarType.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._CarTypeId = value.Id;
					}
					else
					{
						this._CarTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FreightType_Shiping", Storage="_FreightType", ThisKey="FreightTypeId", OtherKey="Id", IsForeignKey=true)]
		public FreightType FreightType
		{
			get
			{
				return this._FreightType.Entity;
			}
			set
			{
				FreightType previousValue = this._FreightType.Entity;
				if (((previousValue != value) 
							|| (this._FreightType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FreightType.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._FreightType.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._FreightTypeId = value.Id;
					}
					else
					{
						this._FreightTypeId = default(int);
					}
					this.SendPropertyChanged("FreightType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Shiping", Storage="_Adresses", ThisKey="LoadingAdressId", OtherKey="Id", IsForeignKey=true)]
		public Adress Adresses
		{
			get
			{
				return this._Adresses.Entity;
			}
			set
			{
				Adress previousValue = this._Adresses.Entity;
				if (((previousValue != value) 
							|| (this._Adresses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adresses.Entity = null;
						previousValue.Shipings.Remove(this);
					}
					this._Adresses.Entity = value;
					if ((value != null))
					{
						value.Shipings.Add(this);
						this._LoadingAdressId = value.Id;
					}
					else
					{
						this._LoadingAdressId = default(int);
					}
					this.SendPropertyChanged("Adresses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Shiping1", Storage="_Adress", ThisKey="UnloadingAdressId", OtherKey="Id", IsForeignKey=true)]
		public Adress Adress
		{
			get
			{
				return this._Adress.Entity;
			}
			set
			{
				Adress previousValue = this._Adress.Entity;
				if (((previousValue != value) 
							|| (this._Adress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adress.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._Adress.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._UnloadingAdressId = value.Id;
					}
					else
					{
						this._UnloadingAdressId = default(int);
					}
					this.SendPropertyChanged("Adress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Shiping", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private int _Id;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Phone;
		
		private string _Name;
		
		private string _FirstName;
		
		private string _SecondName;
		
		private string _Password;
		
		private string _Email;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ActivateDate;
		
		private System.Nullable<System.DateTime> _LastVisitDate;
		
		private string _ActivateLink;
		
		private EntitySet<Car> _Car;
		
		private EntitySet<Shiping> _Shiping;
		
		private EntitySet<UserRole> _UserRole;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnActivateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActivateDateChanged();
    partial void OnLastVisitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastVisitDateChanged();
    partial void OnActivateLinkChanging(string value);
    partial void OnActivateLinkChanged();
    #endregion
		
		public User()
		{
			this._Car = new EntitySet<Car>(new Action<Car>(this.attach_Car), new Action<Car>(this.detach_Car));
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Char(10)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondName", DbType="VarChar(50)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActivateDate
		{
			get
			{
				return this._ActivateDate;
			}
			set
			{
				if ((this._ActivateDate != value))
				{
					this.OnActivateDateChanging(value);
					this.SendPropertyChanging();
					this._ActivateDate = value;
					this.SendPropertyChanged("ActivateDate");
					this.OnActivateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivateLink", DbType="VarChar(50)")]
		public string ActivateLink
		{
			get
			{
				return this._ActivateLink;
			}
			set
			{
				if ((this._ActivateLink != value))
				{
					this.OnActivateLinkChanging(value);
					this.SendPropertyChanging();
					this._ActivateLink = value;
					this.SendPropertyChanged("ActivateLink");
					this.OnActivateLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_Car", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Car> Car
		{
			get
			{
				return this._Car;
			}
			set
			{
				this._Car.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Shiping", Storage="_Shiping", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRole", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Car(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
